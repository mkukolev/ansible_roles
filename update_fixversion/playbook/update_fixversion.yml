---
- name: Update fixVersion in Jira
  hosts: localhost
  gather_facts: false
  vars:
    jira_url: "https://jira.astralinux.ru"
    jira_user: "{{ ansible_user }}"
    jira_api_token: "{{ ansible_password }}"
    next_release_name: next-release
    jira_project_key: "AA"

  tasks:

    - name: Webhook не содержит коммитов — завершаем выполнение
      debug:
        msg: "Webhook не содержит коммитов — возможно, это удаление ветки. Завершаем выполнение без ошибок."
      when: awx_webhook_payload.commits is not defined or awx_webhook_payload.commits | length == 0

    - meta: end_play
      when: awx_webhook_payload.commits is not defined or awx_webhook_payload.commits | length == 0

    - name: Установить имя ветки из webhook
      set_fact:
        branch_name: "{{ awx_webhook_payload.changes[0].ref.displayId | default('') }}"

    - name: Проверка значения переменной branch_name
      debug:
        msg: "Имя ветки: {{ branch_name }}"

    - name: Получить список всех задач из webhook
      set_fact:
        all_issue_keys: "{{ awx_webhook_payload.commits | map(attribute='properties') | map(attribute='jira-key') | select('defined') | list | flatten | unique }}"

    - name: Проверка найденных задач Jira
      debug:
        var: all_issue_keys

    - name: Пропустить обновление, если задач нет
      meta: end_play
      when: all_issue_keys | length == 0

    - name: Проверка, является ли ветка релизной
      set_fact:
        is_release_branch: true
        release_name: "{{ branch_name | regex_replace('^release/', '') }}"
      when: branch_name is match('^release/')

    - name: Проверка, является ли ветка основной
      set_fact:
        is_main_branch: true
      when: branch_name in ['devel', 'master', 'main']

    - name: Проверка, является ли ветка фичей/багфиксом — если да, завершаем
      meta: end_play
      when: branch_name is match('^(feature|bugfix)/')

    - name: Получить список всех версий проекта
      uri:
        url: "{{ jira_url }}/rest/api/2/project/{{ jira_project_key }}/versions"
        method: GET
        user: "{{ jira_user }}"
        password: "{{ jira_api_token }}"
        force_basic_auth: true
        return_content: yes
        status_code: [200, 204]
        headers:
          Content-Type: "application/json"
      register: jira_versions_response

    - name: Найти ID версии релиза (если релизная ветка)
      set_fact:
        release_version_id: "{{ (jira_versions_response.json | selectattr('name', 'equalto', release_name) | list)[0].id }}"
      when: is_release_branch | default(false)

    - name: Найти ID версии next-release (если основная ветка)
      set_fact:
        next_release_version_id: "{{ (jira_versions_response.json | selectattr('name', 'equalto', next_release_name) | list)[0].id }}"
      when: is_main_branch | default(false)

    - name: Обновить fixVersion у задач Jira
      block:
        - name: Получить текущие fixVersion задачи
          uri:
            url: "{{ jira_url }}/rest/api/2/issue/{{ item }}"
            method: GET
            user: "{{ jira_user }}"
            password: "{{ jira_api_token }}"
            force_basic_auth: true
            return_content: yes
            headers:
              Content-Type: "application/json"
          register: issue_response
          loop: "{{ all_issue_keys }}"
          loop_control:
            label: "{{ item }}"
          vars:
            issue_key: "{{ item }}"

        - name: Подготовить новые версии для задачи
          set_fact:
            updated_versions: >-
              {%- set current_versions = (issue_response.results[loop.index0].json.fields.fixVersions | map(attribute='id') | list) -%}
              {%- set updated = current_versions | difference([next_release_version_id|string]) if is_release_branch | default(false) else current_versions -%}
              {%- if is_release_branch | default(false) -%}
                {{ (updated + [release_version_id|string]) | unique }}
              {%- elif is_main_branch | default(false) and next_release_version_id is defined -%}
                {{ (updated + [next_release_version_id|string]) | unique }}
              {%- else -%}
                {{ current_versions }}
              {%- endif -%}

        - name: Преобразовать список версий в нужный формат
          set_fact:
            updated_versions_structured: "{{ updated_versions | map('regex_replace', '^(.*)$', '{\"id\": \"\\1\"}') | map('from_json') | list }}"

        - name: Обновить задачу Jira
          uri:
            url: "{{ jira_url }}/rest/api/2/issue/{{ item }}"
            method: PUT
            user: "{{ jira_user }}"
            password: "{{ jira_api_token }}"
            force_basic_auth: true
            headers:
              Content-Type: "application/json"
            body_format: json
            body:
              fields:
                fixVersions: "{{ updated_versions_structured }}"
            status_code: [200, 204]
          loop: "{{ all_issue_keys }}"
      when: release_version_id is defined or next_release_version_id is defined