---
- name: Обновить fixVersion задач Jira по событию из Bitbucket
  hosts: localhost
  gather_facts: false

  vars:
    jira_base_url: "https://jira.astralinux.ru"
    jira_project_key: "AA"
    next_release_version_name: "next-release"
    release_branch_prefix: "release/"
    main_branches: ["devel", "master", "main"]

  tasks:

    - name: Получить список всех задач из webhook
      set_fact:
        jira_issues: "{{ webhook_payload.commits | map(attribute='properties.jira-key') | list | flatten | unique | default([]) }}"

    - name: Пропустить обновление, если задач нет
      meta: end_play
      when: jira_issues | length == 0

    - name: Получить имя ветки из webhook
      set_fact:
        branch_name: "{{ webhook_payload.changes[0].ref.displayId }}"

    - name: Пропустить обновление, если ветка фича/багфикс
      meta: end_play
      when: branch_name.startswith('feature/') or branch_name.startswith('bugfix/')

    - name: Получить список всех версий проекта
      uri:
        url: "{{ jira_base_url }}/rest/api/2/project/{{ jira_project_key }}/versions"
        method: GET
        headers:
          Authorization: "Basic {{ jira_auth }}"
          Content-Type: "application/json"
        return_content: true
      register: versions_response

    - name: Преобразовать список версий в JSON
      set_fact:
        all_versions: "{{ versions_response.json }}"

    - name: Установить имя релиза (если релизная ветка)
      set_fact:
        release_version_name: "{{ branch_name | regex_replace('^release/', '') }}"
      when: branch_name.startswith(release_branch_prefix)

    - name: Найти ID версии релиза (если релизная ветка)
      set_fact:
        release_version_id: >-
          {{
            (all_versions | selectattr('name', 'equalto', release_version_name) | list | first).id
              if release_version_name is defined else None
          }}

    - name: Найти ID версии next-release (если основная ветка)
      set_fact:
        next_release_version_id: >-
          {{
            (all_versions | selectattr('name', 'equalto', next_release_version_name) | list | first).id
              if branch_name in main_branches else None
          }}

    - name: Создать мапу версий ID → название
      set_fact:
        version_id_to_name: "{{ version_id_to_name | default({}) | combine({ item.id: item.name }) }}"
      loop: "{{ all_versions }}"

    - name: Получить текущие fixVersion задачи
      uri:
        url: "{{ jira_base_url }}/rest/api/2/issue/{{ item }}"
        method: GET
        headers:
          Authorization: "Basic {{ jira_auth }}"
          Content-Type: "application/json"
        return_content: true
      loop: "{{ jira_issues }}"
      register: issue_data

    - name: Сформировать список задач с новыми версиями
      set_fact:
        updated_issues: >-
          {{
            updated_issues | default([]) +
            [{
              "issue": item.item,
              "current_versions": (item.json.fields.fixVersions | map(attribute='id') | list),
              "new_versions": (
                (
                  (
                    (item.json.fields.fixVersions | map(attribute='id') | list)
                    + ([release_version_id] if release_version_id is defined and release_version_id is not none else [])
                  )
                  | reject('equalto', next_release_version_id)
                  | unique
                )
                if release_version_id is defined
                else
                (
                  (
                    (item.json.fields.fixVersions | map(attribute='id') | list)
                    + ([next_release_version_id] if next_release_version_id is defined and next_release_version_id is not none else [])
                  )
                  | unique
                )
              )
            }]
          }}
      loop: "{{ issue_data.results }}"

    - name: Какие fixVersion ID пойдут в задачу
      debug:
        msg: |
          Задача: {{ item.issue }},
          Текущие: {{ item.current_versions }},
          Новые: {{ item.new_versions }},
          Имена: {{ item.new_versions | map('extract', version_id_to_name) | list }}
      loop: "{{ updated_issues }}"

    - name: Пропустить обновление, если fixVersions не изменились
      debug:
        msg: "Пропускаем {{ item.issue }} — fixVersions не изменились"
      loop: "{{ updated_issues }}"
      when: item.current_versions | difference(item.new_versions) | length == 0
            and item.new_versions | difference(item.current_versions) | length == 0

    - name: Обновить задачи Jira с нужными версиями
      uri:
        url: "{{ jira_base_url }}/rest/api/2/issue/{{ item.issue }}"
        method: PUT
        headers:
          Authorization: "Basic {{ jira_auth }}"
          Content-Type: "application/json"
        body_format: json
        body:
          fields:
            fixVersions: "{{ item.new_versions | map('regex_replace', '^(.*)$', '{\"id\": \"\\1\"}') | map('from_json') | list }}"
      loop: "{{ updated_issues }}"
      when: item.current_versions | difference(item.new_versions) | length > 0
            or item.new_versions | difference(item.current_versions) | length > 0

        