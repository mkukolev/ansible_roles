---
- name: Update fixVersion in Jira
  hosts: localhost
  gather_facts: false
  vars:
    jira_url: "https://jira.astralinux.ru"
    jira_user: "{{ ansible_user }}"
    jira_api_token: "{{ ansible_password }}"
    next_release_name: next-release
    jira_project_key: "AA"

  tasks:

    - name: Webhook не содержит коммитов — завершаем выполнение
      debug:
        msg: "Webhook не содержит коммитов — возможно, это удаление ветки. Завершаем выполнение без ошибок."
      when: awx_webhook_payload.commits is not defined or awx_webhook_payload.commits | length == 0

    - meta: end_play
      when: awx_webhook_payload.commits is not defined or awx_webhook_payload.commits | length == 0

    - name: Установить имя ветки из webhook
      set_fact:
        branch_name: "{{ awx_webhook_payload.changes[0].ref.displayId | default('') }}"

    - name: Получить список всех задач из webhook
      set_fact:
        all_issue_keys: "{{ awx_webhook_payload.commits | map(attribute='properties') | map(attribute='jira-key') | select('defined') | list | flatten | unique }}"

    - name: Пропустить обновление, если задач нет
      meta: end_play
      when: all_issue_keys | length == 0

    - name: Пропустить обновление, если ветка фича/багфикс
      meta: end_play
      when: branch_name is search('^feature/') or branch_name is search('^bugfix/')

    - name: Получить список всех версий проекта
      uri:
        url: "{{ jira_url }}/rest/api/2/project/{{ jira_project_key }}/versions"
        method: GET
        user: "{{ jira_user }}"
        password: "{{ jira_api_token }}"
        force_basic_auth: true
        return_content: yes
        status_code: [200, 204]
        headers:
          Content-Type: "application/json"
      register: jira_versions_response

    - name: Установить имя релиза (если релизная ветка)
      set_fact:
        release_name: "{{ branch_name | regex_replace('^release/', '') }}"
      when: branch_name is search('^release/')

    - name: Найти ID версии релиза (если релизная ветка)
      set_fact:
        release_version_id: "{{ (jira_versions_response.json | selectattr('name', 'equalto', release_name) | list)[0].id }}"
      when:
        - branch_name is search('^release/')
        - (jira_versions_response.json | selectattr('name', 'equalto', release_name) | list) | length > 0

    - name: Найти ID версии next-release (если основная ветка)
      set_fact:
        next_release_version_id: "{{ (jira_versions_response.json | selectattr('name', 'equalto', next_release_name) | list)[0].id }}"
      when: branch_name in ['devel', 'master', 'main'] and (jira_versions_response.json | selectattr('name', 'equalto', next_release_name) | list) | length > 0

    - name: Создать мапу версий ID → название
      set_fact:
        version_id_map: >-
          {{
            {
              (release_version_id | default('')): release_name | default(''),
              (next_release_version_id | default('')): next_release_name
            } | dict2items | rejectattr('key', 'equalto', '') | list | items2dict
          }}

    - name: Получить текущие fixVersion задачи
      uri:
        url: "{{ jira_url }}/rest/api/2/issue/{{ item }}"
        method: GET
        user: "{{ jira_user }}"
        password: "{{ jira_api_token }}"
        force_basic_auth: true
        headers:
          Content-Type: "application/json"
      register: jira_issue_details
      loop: "{{ all_issue_keys }}"
      loop_control:
        label: "{{ item }}"

    - name: Сформировать список задач с новыми версиями
      set_fact:
        updated_issues: >-
          {{
            updated_issues | default([]) + [
              {
                'issue': item.item,
                'current_versions': item.json.fields.fixVersions | map(attribute='id') | list,
                'new_versions': (
                  (item.json.fields.fixVersions | map(attribute='id') | list)
                  + ([release_version_id] if release_version_id is defined else [])
                  + ([next_release_version_id] if next_release_version_id is defined else [])
                )
                | reject('equalto', (next_release_version_id | default('SKIP')))
                | unique
              }
            ]
          }}
      loop: "{{ jira_issue_details.results }}"

    - name: Какие fixVersion ID пойдут в задачу
      debug:
        msg: >
          Задача: {{ item.issue }},
          Текущие: {{ item.current_versions }},
          Новые: {{ item.new_versions }},
          Имена: {{ item.new_versions | map('extract', version_id_map) | list }}
      loop: "{{ updated_issues }}"

    - name: Обновить задачи Jira с нужными версиями
      uri:
        url: "{{ jira_url }}/rest/api/2/issue/{{ item.issue }}"
        method: PUT
        user: "{{ jira_user }}"
        password: "{{ jira_api_token }}"
        force_basic_auth: true
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          fields:
            fixVersions: "{{ item.new_versions | map('extract', version_id_map) | map('community.general.to_json', '{\"id\": \"\\1\"}') | map('from_json') | list }}"
        status_code: [200, 204]
      loop: "{{ updated_issues }}"

        