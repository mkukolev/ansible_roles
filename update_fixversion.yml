---
- name: Update fixVersion in Jira
  hosts: localhost
  gather_facts: false

  vars:
    jira_username: "{{ ansible_user }}"
    jira_password: "{{ ansible_password }}"
    jira_base_url: "https://jira.astralinux.ru"
    jira_project_key: "AA"

  tasks:

    - name: Установить имя ветки из webhook
      set_fact:
        branch_name: "{{ webhook_payload.changes[0].ref.displayId }}"

    - name: Проверка значения переменной branch_name
      debug:
        msg: "Имя ветки: {{ branch_name }}"

    - name: Определить имя релизной версии, если ветка релизная
      set_fact:
        release_version_name: "{{ branch_name.split('/')[-1] }}"
      when: branch_name.startswith('release/')

    - name: Извлечь задачи Jira из всех коммитов
      set_fact:
        jira_issues_raw: "{{ webhook_payload.commits | map(attribute='properties') | map(attribute='jira-key', default=[]) | list | flatten }}"

    - name: Пропустить задачу, если нет Jira-задач в коммитах
      debug:
        msg: "Jira-задачи не найдены"
      when: jira_issues_raw | length == 0

    - name: Получить список задач без дубликатов
      set_fact:
        jira_issues: "{{ jira_issues_raw | unique }}"
      when: jira_issues_raw | length > 0

    - name: Найти ID версии по имени (release или next-release)
      uri:
        url: "{{ jira_base_url }}/rest/api/2/project/{{ jira_project_key }}/versions"
        method: GET
        user: "{{ jira_username }}"
        password: "{{ jira_password }}"
        force_basic_auth: yes
        return_content: yes
        headers:
          Content-Type: "application/json"
      register: jira_versions

    - name: Установить ID нужной версии
      set_fact:
        version_id: >-
          {{
            (jira_versions.json | selectattr("name", "==", (release_version_name if branch_name.startswith('release/') else "next-release")) | list)[0].id
          }}
      when: jira_issues is defined and (branch_name.startswith('release/') or branch_name in ['devel', 'master', 'main'])

    - name: Обновить fixVersion у задач Jira
      uri:
        url: "{{ jira_base_url }}/rest/api/2/issue/{{ item }}"
        method: PUT
        user: "{{ jira_username }}"
        password: "{{ jira_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body: |
          {
            "fields": {
              "fixVersions": [
                {% if branch_name.startswith('release/') or branch_name in ['devel', 'master', 'main'] %}
                { "id": "{{ version_id }}" }
                {% else %}
                ]
              }
            }
          }
        body_format: json
        status_code: [200, 204]
      loop: "{{ jira_issues }}"
      when: jira_issues is defined and (
              branch_name.startswith('release/') or
              branch_name in ['devel', 'master', 'main']
            )

    - name: Очистить fixVersion, если ветка feature/ или bugfix/
      uri:
        url: "{{ jira_base_url }}/rest/api/2/issue/{{ item }}"
        method: PUT
        user: "{{ jira_username }}"
        password: "{{ jira_password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body: |
          {
            "fields": {
              "fixVersions": []
            }
          }
        body_format: json
        status_code: [200, 204]
      loop: "{{ jira_issues }}"
      when: jira_issues is defined and (
              branch_name.startswith('feature/') or
              branch_name.startswith('bugfix/')
            )